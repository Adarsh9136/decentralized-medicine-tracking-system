#include <DHT.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include "time.h"

#define DHTPIN 4     // Digital pin connected to the DHT11 sensor
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);

#define WIFI_SSID "WIFI_NAME"
#define WIFI_PASSWORD "WIFI_PASSWORD"

const char* projectId = "PROJECT_ID";
const char* privateKey = "FIREBASE_API_KEY";

const char* medicineId = "MEDICINE_ID";

const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 0;
const int   daylightOffset_sec = 0;

WiFiClient client;
float maximumTemperature;
float minimumTemperature;
bool status=true;
void setup() {
  // Connect to Wi-Fi
  Serial.begin(9600);
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");

  // Initialize and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  
  //To fetch details of medicine
  fetchMedicineData();

}
void fetchMedicineData() {
    delay(2000);

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Construct Firestore URL
    String url = "https://firestore.googleapis.com/v1/projects/" + String(projectId) + "/databases/(default)/documents/medicines/"+ String(medicineId) + "?key=" + String(privateKey);

    http.begin(url);

    // Send GET request to Firestore
    int httpResponseCode = http.GET();

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(response);

      // Parse JSON response
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, response);

      // Extract maximumTemperature and minimumTemperature from the response
      String maxTempStr = doc["fields"]["maximumTemperature"]["stringValue"];
      String minTempStr = doc["fields"]["minimumTemperature"]["stringValue"];
      status = doc["fields"]["status"]["booleanValue"];

      maximumTemperature = maxTempStr.toFloat();
      minimumTemperature = minTempStr.toFloat();

      Serial.print("Maximum Temperature: ");
      Serial.println(maximumTemperature);
      Serial.print("Minimum Temperature: ");
      Serial.println(minimumTemperature);
    } else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }
}


void loop() {
  delay(20000);

  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  fetchMedicineData();
    if (!isnan(humidity) && !isnan(temperature)) {
      Serial.print("Date & Time: ");
      Serial.print(getFormattedTime());
      Serial.print(", Temperature: ");
      Serial.print(temperature);
      Serial.print(" Â°C, Humidity: ");
      Serial.print(humidity);
      Serial.println(" %");
      // Check if temperature is within range
      bool isTemperatureSafe = (temperature >= minimumTemperature && temperature <= maximumTemperature);
        // Update medicine status based on temperature range
          if(status){

            if(isTemperatureSafe){
                Serial.println("Medicine status is : safe ");
            }else{
                Serial.println("Medicine status is : Damaged ");
                updateMedicineStatus(isTemperatureSafe,temperature,humidity,"18.458328371701732","73.8551554319944","Pune");
            }
          }
      sendTemperatureAndHumidity(temperature, humidity);
    } else {
      Serial.println("Failed to read from DHT sensor!");
    }
}

String getFormattedTime() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return String("");
  }
  char buffer[30]; // Increased buffer size to accommodate timezone offset
  strftime(buffer, sizeof(buffer), "%Y-%m-%dT%H:%M:%SZ", &timeinfo); // Add 'Z' directly in strftime format
  
  return String(buffer);
}

void sendTemperatureAndHumidity(float temperature, float humidity) {
 
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Construct Firestore document data
    DynamicJsonDocument doc(200);
    JsonObject data = doc.to<JsonObject>();
    data["fields"]["temperature"]["doubleValue"] = temperature;
    data["fields"]["humidity"]["doubleValue"] = humidity;
    data["fields"]["time"]["timestampValue"] = getFormattedTime();
    data["fields"]["latitude"]["stringValue"]="18.458328371701732";
    data["fields"]["longitude"]["stringValue"]="73.8551554319944";
    data["fields"]["location"]["stringValue"]="Pune";

    // Convert data to string
    String dataStr;
    serializeJson(doc, dataStr);

    // Construct Firestore URL
    String url = "https://firestore.googleapis.com/v1/projects/" + String(projectId) + "/databases/(default)/documents/medicines/"+ String(medicineId) +"/transactions?key=" + String(privateKey);

    http.begin(url);
    http.addHeader("Content-Type", "application/json");

    // Send POST request to Firestore
    int httpResponseCode = http.POST(dataStr);

    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
      String response = http.getString();
      Serial.println(response);
    } else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }
}

void updateMedicineStatus(bool isTemperatureSafe, float temperature, float humidity,String latitude, String longitude,String location) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Construct Firestore document data
    DynamicJsonDocument doc(200);
    JsonObject data = doc.to<JsonObject>();
    data["fields"]["status"]["booleanValue"] = isTemperatureSafe;
    // Convert data to string
    String dataStr;
    serializeJson(doc, dataStr);

    // Construct Firestore URL
    String url = "https://firestore.googleapis.com/v1/projects/" + String(projectId) + "/databases/(default)/documents/medicines/"+ String(medicineId) + "?updateMask.fieldPaths=status&currentDocument.exists=true&key=" + String(privateKey);

    http.begin(url);
    http.addHeader("Content-Type", "application/json");

    // Send PATCH request to Firestore to update medicine status
    int httpResponseCode = http.PATCH(dataStr);

    if (httpResponseCode > 0) {
      Serial.print("Medicine status updated to: ");
      Serial.println("Damaged");
    } else {
      Serial.print("Error updating medicine status. Error code: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }

}
